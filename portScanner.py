# socket library allows us to stablish a connection over the internet
import socket
#intall it with command "pip3 install IPy" -> in my case "C:/Users/brill/AppData/Local/Microsoft/WindowsApps/python3.10.exe -m pip install IPy  "
from IPy import IP # we will use it in order for the user to put a domain name instead of using nslookup
import threading #for faster scanning port

thread_limit = 50  # Number of threads to use for port scanning
semaphore = threading.Semaphore(value=thread_limit)

class PortScan():

  banners = []
  open_ports = []

  # Constructor
  def __init__(self, target):
    self.target = target  # First, assign the input target to self.target
    self.target = self.check_ip()  # Then, update it using the check_ip method

    
  def ip_scaner(self):

    if not self.target:
      print(f"Skipping {self.target}...")
      return

    print(f"\n üîéüî¨scanning target: {self.target} \n")

    for port in range(1, 1025):
      semaphore.acquire()
      t = threading.Thread(target=self.scan_port, args=(port,))
      t.start()

  def check_ip(self):
    try:
      if "http://" in self.target or "https://" in self.target:
        self.target = self.target.split("://")[1].split("/")[0]
      IP(self.target)
      return self.target
    except ValueError:
      try:
        return socket.gethostbyname(self.target)
      except socket.gaierror:
        print(f"Failed to get IP address for {self.target}. Is it a valid hostname?")
        return None



  def get_port_description(self,port):
    port_descriptions = {
      20: 'FTP Data Transfer',
      21: 'FTP Command Control',
      22: 'SSH',
      23: 'Telnet',
      25: 'SMTP',
      53: 'DNS',
      67: 'DHCP Server',
      68: 'DHCP Client',
      69: 'TFTP',
      80: 'HTTP',
      110: 'POP3',
      123: 'NTP',
      137: 'NETBIOS Name Service',
      138: 'NETBIOS Datagram Service',
      139: 'NETBIOS Session Service',
      143: 'IMAP',
      161: 'SNMP',
      162: 'SNMPTRAP',
      443: 'HTTPS',
      445: 'Microsoft-DS',
      3389: 'RDP',
      3306: 'MySQL',
      5432: 'PostgreSQL',
     27017: 'MongoDB'
    }
    return port_descriptions.get(port, 'Unknown Service')






  def scan_port(self, port):
        try:
            # No need to convert IP again here, already done in __init__
            sock = socket.socket()
            sock.settimeout(0.5)
            sock.connect((self.target, port))
            self.open_ports.append(port)

            description = self.get_port_description(port)

            try:
                banner = sock.recv(1024).decode().strip("\n").strip("\r")
                self.banners.append(banner)
                print(f"port {port} is open using {banner} Software üêß- {description}")
            except:
                self.banners.append("0")
                print(f"port {port} is open üêß- {description}")

            sock.close()
        except:
            pass
        finally:
            semaphore.release()





  